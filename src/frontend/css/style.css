
.hidden { display: none } /* use this CSS class to disable elements temporarily */

body, html {
  background-color: #C8C8C8; /* a nice steelblue (but not the same as what Gecko thinks steelblue is */

  height: 100%;  /* ensure that subelements are able to compute using relative units; why, CSS, why? */
}

h1, h2, h3, h4, h5, h6 { color: steelblue }

/* layout */

#layout {
  height: 100%;
  width: 80%;
  margin-left: auto;
  margin-right: auto;
}

/* wrapper div so that inner divs will bunch up against each other proper-like */
/* this is sometimes called "shrinkwrapping" */
#view { height: 80%; }
#view > * { display: inline-block; height: 100% } 

#controls { 
   background: grey;
   margin-left: auto;
   margin-right: auto;
}
#controls > * { display: inline-block }
#controls a { 
  opacity: .2; /*initially grey out since it's inactive*/
  color: white;
  margin: 0;
  padding: .2em;
}

/* the ideal layout:
   - automatically figures out if it has enough space to render the two elements side by side (to some minimum definition of "enough space", say 200px)
   - if not, splits them onto multiple lines, and on those lines spreads them as wide as possible
I know i've done this before, I just have to remember how -kousu
*/

#map {
  float: left;
  width: 61%; /* golden ratio */
  border-top-left-radius: 20px;
  /*border-bottom-left-radius: 20px;*/
  overflow: hidden; /* make the radius affect the inner map rendering elements */
}

#graph {
  width: 35%; /*it would be nice if this could be autocalculated from the available space*/
  background: white;
  border-top-right-radius: 20px;
  /*border-bottom-right-radius: 20px;*/
  border-left: black solid 2px ;
  overflow: hidden; /* make the radius affect the inner map rendering elements */
}

/* d3 properties */
.axis path, .axis line {
  fill: none;
  stroke: #000;
  shape-rendering: crispEdges;
}

.x.axis path {
  display: none;
}

.line {
  fill: none;
  stroke: steelblue;
  stroke-width: 1.5px;
}

